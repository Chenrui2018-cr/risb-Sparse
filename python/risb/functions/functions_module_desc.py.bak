# Generated automatically using the command :
# c++2py ../../../c++/risb/functions/functions.hpp -p --members_read_only -N risb::functions -a risb -m risb.functions_module -o functions_module --moduledoc="The functions in risb/solver python module" -C triqs --includes=-I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi -I/usr/lib/x86_64-linux-gnu/openmpi/include --cxxflags="-std=c++17"
from cpp2py.wrap_generator import *

# The module
module = module_(full_name = "risb.functions_module", doc = r"The functions in risb/solver python module", app_name = "risb")

# Imports
module.add_imports(*['triqs.gf', 'triqs.operators'])

# Add here all includes
module.add_include("risb/functions/functions.hpp")

# Add here anything to add in the C++ code at the start, e.g. namespace using
module.add_preamble("""
#include <cpp2py/converters/pair.hpp>
#include <cpp2py/converters/set.hpp>
#include <cpp2py/converters/std_array.hpp>
#include <cpp2py/converters/vector.hpp>
#include <cpp2py/converters/variant.hpp> // need this for convertering fundamental_operator_set
#include <triqs/cpp2py_converters/arrays.hpp>
#include <triqs/cpp2py_converters/fundamental_operator_set.hpp>
#include <triqs/cpp2py_converters/gf.hpp>
#include <triqs/cpp2py_converters/operators_real_complex.hpp>

using namespace risb::functions;
""")


# The class EigSystem
c = class_(
        py_type = "Eigsystem",  # name of the python class
        c_type = "risb::functions::EigSystem<double>",   # name of the C++ class
        doc = r"""""",   # doc of the C++ class
        hdf5 = False,
)

c.add_member(c_name = "val",
             c_type = "triqs::array:array<double,2>",
             read_only = True,
             doc = """Eigenvalues""")

c.add_member(c_name = "vec",
             c_type = "triqs::array::array<double,3>",
             read_only = True,
             doc = """Eigenvectors""")

c.add_member(c_name = "vec_inv",
             c_type = "triqs::array::array<double,3>",
             read_only = True,
             doc = """Inverse of eigenvectors""")

module.add_class(c)

module.add_function ("std::pair<fundamental_operator_set, fundamental_operator_set> risb::functions::get_embedding_space (triqs::hilbert_space::fundamental_operator_set fops_local)", doc = r"""Parameters
----------
fops
     The fundamental operator set of the local cluster

Returns
-------
out
     The fundamental operator set of the bath and the embedding space (contains local+bath)""")

module.add_function ("EigSystem<double> risb::functions::get_h_qp_real (std::vector<matrix<double> > R, std::vector<matrix<double> > lambda, array<double, 5> dispersion, double mu = 0)", doc = r"""""")

module.add_function ("std::vector<matrix<double> > risb::functions::get_ke_real (std::vector<matrix<double> > R, array<double, 5> dispersion, EigSystem<double> h_qp, array<double, 2> wks)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_pdensity_real (int cluster, EigSystem<double> h_qp, array<double, 2> wks)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_d_real (matrix<double> pdensity, matrix<double> ke)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_lambda_c_real (matrix<double> pdensity, matrix<double> R, matrix<double> lambda, matrix<double> D)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_lambda_real (matrix<double> R, matrix<double> D, matrix<double> lambda_c, matrix<double> Nf)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_r_real (matrix<double> Mcf, matrix<double> Nf)", doc = r"""""")

module.add_function ("triqs::operators::many_body_operator_generic<double> risb::functions::get_h_emb_real (triqs::operators::many_body_operator_generic<double> h_loc, matrix<double> D, matrix<double> lambda_c, triqs::hilbert_space::fundamental_operator_set fops_local, triqs::hilbert_space::fundamental_operator_set fops_bath)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_pdensity_real (gf<triqs::gfs::imfreq> g_z, matrix<double> R)", doc = r"""""")

module.add_function ("matrix<double> risb::functions::get_ke_gf_real (gf<triqs::gfs::imfreq> g_z, gf<triqs::gfs::imfreq> delta_z, matrix<double> R)", doc = r"""""")

module.add_function ("gf<triqs::gfs::imfreq> risb::functions::get_delta_z (gf<triqs::gfs::imfreq> g0_z)", doc = r"""Parameters
----------
g0_iw
     The non-interacting part of the local imaginary frequency Green's function

Returns
-------
out
     delta_iw The hybridization function""")

module.add_function ("gf<triqs::gfs::imfreq> risb::functions::get_sigma_z_real (gf<triqs::gfs::imfreq> g_z, matrix<double> R, matrix<double> lambda, double mu = 0.0)", doc = r"""""")



module.generate_code()
